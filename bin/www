#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('webrtc-sample:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// socket.io
var io = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつけます)
var io = io.listen(server);


io.on('connection', function(socket) {
  // 入室
  socket.on('enter', function(roomname) {
      socket.roomname = roomname;
      //socket.set('roomname', roomname);
      socket.join(roomname);
  });

  socket.on('message', function(message) {
    emitMessage('message', message);
  });

  socket.on('disconnect', function() {
    emitMessage('user disconnected');
  });

  // 会議室名が指定されていたら、室内だけに通知
  function emitMessage(type, message) {
    //var roomname;
    //socket.get('roomname', function(err, _room) {  roomname = _room;  });

    if (socket.roomname) {
      socket.broadcast.to(socket.roomname).emit(type, message);
      console.log("room:" + socket.roomname);
    } else {
      socket.broadcast.emit(type, message);
      console.log("no room");
    }
  }
});